//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3607
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ApqDBManager.XSD {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("SrvsMgr")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class SrvsMgr : global::System.Data.DataSet {
        
        private RSrvConfigDataTable tableRSrvConfig;
        
        private RDBUserDataTable tableRDBUser;
        
        private RDBLoginDataTable tableRDBLogin;
        
        private RDBConfigDataTable tableRDBConfig;
        
        private global::System.Data.DataRelation relationRSrvConfig_RDBConfig;
        
        private global::System.Data.DataRelation relationRSrvConfig_RDBLogin;
        
        private global::System.Data.DataRelation relationRDBLogin_RDBUser;
        
        private global::System.Data.DataRelation relationRDBConfig_RDBUser;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SrvsMgr() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected SrvsMgr(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["RSrvConfig"] != null)) {
                    base.Tables.Add(new RSrvConfigDataTable(ds.Tables["RSrvConfig"]));
                }
                if ((ds.Tables["RDBUser"] != null)) {
                    base.Tables.Add(new RDBUserDataTable(ds.Tables["RDBUser"]));
                }
                if ((ds.Tables["RDBLogin"] != null)) {
                    base.Tables.Add(new RDBLoginDataTable(ds.Tables["RDBLogin"]));
                }
                if ((ds.Tables["RDBConfig"] != null)) {
                    base.Tables.Add(new RDBConfigDataTable(ds.Tables["RDBConfig"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RSrvConfigDataTable RSrvConfig {
            get {
                return this.tableRSrvConfig;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RDBUserDataTable RDBUser {
            get {
                return this.tableRDBUser;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RDBLoginDataTable RDBLogin {
            get {
                return this.tableRDBLogin;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RDBConfigDataTable RDBConfig {
            get {
                return this.tableRDBConfig;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            SrvsMgr cln = ((SrvsMgr)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["RSrvConfig"] != null)) {
                    base.Tables.Add(new RSrvConfigDataTable(ds.Tables["RSrvConfig"]));
                }
                if ((ds.Tables["RDBUser"] != null)) {
                    base.Tables.Add(new RDBUserDataTable(ds.Tables["RDBUser"]));
                }
                if ((ds.Tables["RDBLogin"] != null)) {
                    base.Tables.Add(new RDBLoginDataTable(ds.Tables["RDBLogin"]));
                }
                if ((ds.Tables["RDBConfig"] != null)) {
                    base.Tables.Add(new RDBConfigDataTable(ds.Tables["RDBConfig"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableRSrvConfig = ((RSrvConfigDataTable)(base.Tables["RSrvConfig"]));
            if ((initTable == true)) {
                if ((this.tableRSrvConfig != null)) {
                    this.tableRSrvConfig.InitVars();
                }
            }
            this.tableRDBUser = ((RDBUserDataTable)(base.Tables["RDBUser"]));
            if ((initTable == true)) {
                if ((this.tableRDBUser != null)) {
                    this.tableRDBUser.InitVars();
                }
            }
            this.tableRDBLogin = ((RDBLoginDataTable)(base.Tables["RDBLogin"]));
            if ((initTable == true)) {
                if ((this.tableRDBLogin != null)) {
                    this.tableRDBLogin.InitVars();
                }
            }
            this.tableRDBConfig = ((RDBConfigDataTable)(base.Tables["RDBConfig"]));
            if ((initTable == true)) {
                if ((this.tableRDBConfig != null)) {
                    this.tableRDBConfig.InitVars();
                }
            }
            this.relationRSrvConfig_RDBConfig = this.Relations["RSrvConfig_RDBConfig"];
            this.relationRSrvConfig_RDBLogin = this.Relations["RSrvConfig_RDBLogin"];
            this.relationRDBLogin_RDBUser = this.Relations["RDBLogin_RDBUser"];
            this.relationRDBConfig_RDBUser = this.Relations["RDBConfig_RDBUser"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "SrvsMgr";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/SrvsMgr.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableRSrvConfig = new RSrvConfigDataTable();
            base.Tables.Add(this.tableRSrvConfig);
            this.tableRDBUser = new RDBUserDataTable();
            base.Tables.Add(this.tableRDBUser);
            this.tableRDBLogin = new RDBLoginDataTable();
            base.Tables.Add(this.tableRDBLogin);
            this.tableRDBConfig = new RDBConfigDataTable();
            base.Tables.Add(this.tableRDBConfig);
            this.relationRSrvConfig_RDBConfig = new global::System.Data.DataRelation("RSrvConfig_RDBConfig", new global::System.Data.DataColumn[] {
                        this.tableRSrvConfig.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableRDBConfig.SrvIDColumn}, false);
            this.Relations.Add(this.relationRSrvConfig_RDBConfig);
            this.relationRSrvConfig_RDBLogin = new global::System.Data.DataRelation("RSrvConfig_RDBLogin", new global::System.Data.DataColumn[] {
                        this.tableRSrvConfig.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableRDBLogin.RSrvIDColumn}, false);
            this.Relations.Add(this.relationRSrvConfig_RDBLogin);
            this.relationRDBLogin_RDBUser = new global::System.Data.DataRelation("RDBLogin_RDBUser", new global::System.Data.DataColumn[] {
                        this.tableRDBLogin.RDBLoginIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableRDBUser.RDBLoginIDColumn}, false);
            this.Relations.Add(this.relationRDBLogin_RDBUser);
            this.relationRDBConfig_RDBUser = new global::System.Data.DataRelation("RDBConfig_RDBUser", new global::System.Data.DataColumn[] {
                        this.tableRDBConfig.RDBIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableRDBUser.RDBIDColumn}, false);
            this.Relations.Add(this.relationRDBConfig_RDBUser);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRSrvConfig() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRDBUser() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRDBLogin() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRDBConfig() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            SrvsMgr ds = new SrvsMgr();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void RSrvConfigRowChangeEventHandler(object sender, RSrvConfigRowChangeEvent e);
        
        public delegate void RDBUserRowChangeEventHandler(object sender, RDBUserRowChangeEvent e);
        
        public delegate void RDBLoginRowChangeEventHandler(object sender, RDBLoginRowChangeEvent e);
        
        public delegate void RDBConfigRowChangeEventHandler(object sender, RDBConfigRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RSrvConfigDataTable : global::System.Data.TypedTableBase<RSrvConfigRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnParentID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnSrvName;
            
            private global::System.Data.DataColumn columnUID;
            
            private global::System.Data.DataColumn columnPwdC;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnLSMaxTimes;
            
            private global::System.Data.DataColumn columnLSErrTimes;
            
            private global::System.Data.DataColumn columnLSState;
            
            private global::System.Data.DataColumn columnIPLan;
            
            private global::System.Data.DataColumn columnIPWan1;
            
            private global::System.Data.DataColumn columnIPWan2;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RSrvConfigDataTable() {
                this.TableName = "RSrvConfig";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RSrvConfigDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RSrvConfigDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParentIDColumn {
                get {
                    return this.columnParentID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SrvNameColumn {
                get {
                    return this.columnSrvName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UIDColumn {
                get {
                    return this.columnUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PwdCColumn {
                get {
                    return this.columnPwdC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LSMaxTimesColumn {
                get {
                    return this.columnLSMaxTimes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LSErrTimesColumn {
                get {
                    return this.columnLSErrTimes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LSStateColumn {
                get {
                    return this.columnLSState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IPLanColumn {
                get {
                    return this.columnIPLan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IPWan1Column {
                get {
                    return this.columnIPWan1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IPWan2Column {
                get {
                    return this.columnIPWan2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RSrvConfigRow this[int index] {
                get {
                    return ((RSrvConfigRow)(this.Rows[index]));
                }
            }
            
            public event RSrvConfigRowChangeEventHandler RSrvConfigRowChanging;
            
            public event RSrvConfigRowChangeEventHandler RSrvConfigRowChanged;
            
            public event RSrvConfigRowChangeEventHandler RSrvConfigRowDeleting;
            
            public event RSrvConfigRowChangeEventHandler RSrvConfigRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRSrvConfigRow(RSrvConfigRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RSrvConfigRow AddRSrvConfigRow(int ID, int ParentID, string Name, string SrvName, string UID, string PwdC, int Type, int LSMaxTimes, int LSErrTimes, int LSState, string IPLan, string IPWan1, string IPWan2) {
                RSrvConfigRow rowRSrvConfigRow = ((RSrvConfigRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        ParentID,
                        Name,
                        SrvName,
                        UID,
                        PwdC,
                        Type,
                        LSMaxTimes,
                        LSErrTimes,
                        LSState,
                        IPLan,
                        IPWan1,
                        IPWan2};
                rowRSrvConfigRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRSrvConfigRow);
                return rowRSrvConfigRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RSrvConfigRow FindByID(int ID) {
                return ((RSrvConfigRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RSrvConfigDataTable cln = ((RSrvConfigDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RSrvConfigDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnParentID = base.Columns["ParentID"];
                this.columnName = base.Columns["Name"];
                this.columnSrvName = base.Columns["SrvName"];
                this.columnUID = base.Columns["UID"];
                this.columnPwdC = base.Columns["PwdC"];
                this.columnType = base.Columns["Type"];
                this.columnLSMaxTimes = base.Columns["LSMaxTimes"];
                this.columnLSErrTimes = base.Columns["LSErrTimes"];
                this.columnLSState = base.Columns["LSState"];
                this.columnIPLan = base.Columns["IPLan"];
                this.columnIPWan1 = base.Columns["IPWan1"];
                this.columnIPWan2 = base.Columns["IPWan2"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnParentID = new global::System.Data.DataColumn("ParentID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParentID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnSrvName = new global::System.Data.DataColumn("SrvName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSrvName);
                this.columnUID = new global::System.Data.DataColumn("UID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUID);
                this.columnPwdC = new global::System.Data.DataColumn("PwdC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPwdC);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnLSMaxTimes = new global::System.Data.DataColumn("LSMaxTimes", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLSMaxTimes);
                this.columnLSErrTimes = new global::System.Data.DataColumn("LSErrTimes", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLSErrTimes);
                this.columnLSState = new global::System.Data.DataColumn("LSState", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLSState);
                this.columnIPLan = new global::System.Data.DataColumn("IPLan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIPLan);
                this.columnIPWan1 = new global::System.Data.DataColumn("IPWan1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIPWan1);
                this.columnIPWan2 = new global::System.Data.DataColumn("IPWan2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIPWan2);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 256;
                this.columnSrvName.MaxLength = 256;
                this.columnUID.MaxLength = 256;
                this.columnPwdC.MaxLength = 2147483647;
                this.columnLSMaxTimes.AllowDBNull = false;
                this.columnLSErrTimes.AllowDBNull = false;
                this.columnLSState.AllowDBNull = false;
                this.columnIPLan.MaxLength = 500;
                this.columnIPWan1.MaxLength = 500;
                this.columnIPWan2.MaxLength = 500;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RSrvConfigRow NewRSrvConfigRow() {
                return ((RSrvConfigRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RSrvConfigRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RSrvConfigRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RSrvConfigRowChanged != null)) {
                    this.RSrvConfigRowChanged(this, new RSrvConfigRowChangeEvent(((RSrvConfigRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RSrvConfigRowChanging != null)) {
                    this.RSrvConfigRowChanging(this, new RSrvConfigRowChangeEvent(((RSrvConfigRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RSrvConfigRowDeleted != null)) {
                    this.RSrvConfigRowDeleted(this, new RSrvConfigRowChangeEvent(((RSrvConfigRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RSrvConfigRowDeleting != null)) {
                    this.RSrvConfigRowDeleting(this, new RSrvConfigRowChangeEvent(((RSrvConfigRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRSrvConfigRow(RSrvConfigRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SrvsMgr ds = new SrvsMgr();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RSrvConfigDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RDBUserDataTable : global::System.Data.TypedTableBase<RDBUserRow> {
            
            private global::System.Data.DataColumn columnRDBUserID;
            
            private global::System.Data.DataColumn columnRDBID;
            
            private global::System.Data.DataColumn columnDBUserName;
            
            private global::System.Data.DataColumn columnDBUserDesc;
            
            private global::System.Data.DataColumn columnRDBLoginID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RDBUserDataTable() {
                this.TableName = "RDBUser";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RDBUserDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RDBUserDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RDBUserIDColumn {
                get {
                    return this.columnRDBUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RDBIDColumn {
                get {
                    return this.columnRDBID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DBUserNameColumn {
                get {
                    return this.columnDBUserName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DBUserDescColumn {
                get {
                    return this.columnDBUserDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RDBLoginIDColumn {
                get {
                    return this.columnRDBLoginID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RDBUserRow this[int index] {
                get {
                    return ((RDBUserRow)(this.Rows[index]));
                }
            }
            
            public event RDBUserRowChangeEventHandler RDBUserRowChanging;
            
            public event RDBUserRowChangeEventHandler RDBUserRowChanged;
            
            public event RDBUserRowChangeEventHandler RDBUserRowDeleting;
            
            public event RDBUserRowChangeEventHandler RDBUserRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRDBUserRow(RDBUserRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RDBUserRow AddRDBUserRow(long RDBUserID, RDBConfigRow parentRDBConfigRowByRDBConfig_RDBUser, string DBUserName, string DBUserDesc, RDBLoginRow parentRDBLoginRowByRDBLogin_RDBUser) {
                RDBUserRow rowRDBUserRow = ((RDBUserRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RDBUserID,
                        null,
                        DBUserName,
                        DBUserDesc,
                        null};
                if ((parentRDBConfigRowByRDBConfig_RDBUser != null)) {
                    columnValuesArray[1] = parentRDBConfigRowByRDBConfig_RDBUser[0];
                }
                if ((parentRDBLoginRowByRDBLogin_RDBUser != null)) {
                    columnValuesArray[4] = parentRDBLoginRowByRDBLogin_RDBUser[0];
                }
                rowRDBUserRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRDBUserRow);
                return rowRDBUserRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RDBUserRow FindByRDBUserID(long RDBUserID) {
                return ((RDBUserRow)(this.Rows.Find(new object[] {
                            RDBUserID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RDBUserDataTable cln = ((RDBUserDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RDBUserDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRDBUserID = base.Columns["RDBUserID"];
                this.columnRDBID = base.Columns["RDBID"];
                this.columnDBUserName = base.Columns["DBUserName"];
                this.columnDBUserDesc = base.Columns["DBUserDesc"];
                this.columnRDBLoginID = base.Columns["RDBLoginID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRDBUserID = new global::System.Data.DataColumn("RDBUserID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRDBUserID);
                this.columnRDBID = new global::System.Data.DataColumn("RDBID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRDBID);
                this.columnDBUserName = new global::System.Data.DataColumn("DBUserName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDBUserName);
                this.columnDBUserDesc = new global::System.Data.DataColumn("DBUserDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDBUserDesc);
                this.columnRDBLoginID = new global::System.Data.DataColumn("RDBLoginID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRDBLoginID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRDBUserID}, true));
                this.columnRDBUserID.AllowDBNull = false;
                this.columnRDBUserID.Unique = true;
                this.columnDBUserName.AllowDBNull = false;
                this.columnDBUserName.MaxLength = 256;
                this.columnDBUserDesc.MaxLength = 2147483647;
                this.columnRDBLoginID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RDBUserRow NewRDBUserRow() {
                return ((RDBUserRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RDBUserRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RDBUserRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RDBUserRowChanged != null)) {
                    this.RDBUserRowChanged(this, new RDBUserRowChangeEvent(((RDBUserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RDBUserRowChanging != null)) {
                    this.RDBUserRowChanging(this, new RDBUserRowChangeEvent(((RDBUserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RDBUserRowDeleted != null)) {
                    this.RDBUserRowDeleted(this, new RDBUserRowChangeEvent(((RDBUserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RDBUserRowDeleting != null)) {
                    this.RDBUserRowDeleting(this, new RDBUserRowChangeEvent(((RDBUserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRDBUserRow(RDBUserRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SrvsMgr ds = new SrvsMgr();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RDBUserDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RDBLoginDataTable : global::System.Data.TypedTableBase<RDBLoginRow> {
            
            private global::System.Data.DataColumn columnRDBLoginID;
            
            private global::System.Data.DataColumn columnRSrvID;
            
            private global::System.Data.DataColumn columnDBLoginName;
            
            private global::System.Data.DataColumn columnDBLoginDesc;
            
            private global::System.Data.DataColumn columnSID;
            
            private global::System.Data.DataColumn columnLoginPwdC;
            
            private global::System.Data.DataColumn columnLoginPwdD;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RDBLoginDataTable() {
                this.TableName = "RDBLogin";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RDBLoginDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RDBLoginDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RDBLoginIDColumn {
                get {
                    return this.columnRDBLoginID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RSrvIDColumn {
                get {
                    return this.columnRSrvID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DBLoginNameColumn {
                get {
                    return this.columnDBLoginName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DBLoginDescColumn {
                get {
                    return this.columnDBLoginDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SIDColumn {
                get {
                    return this.columnSID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoginPwdCColumn {
                get {
                    return this.columnLoginPwdC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoginPwdDColumn {
                get {
                    return this.columnLoginPwdD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RDBLoginRow this[int index] {
                get {
                    return ((RDBLoginRow)(this.Rows[index]));
                }
            }
            
            public event RDBLoginRowChangeEventHandler RDBLoginRowChanging;
            
            public event RDBLoginRowChangeEventHandler RDBLoginRowChanged;
            
            public event RDBLoginRowChangeEventHandler RDBLoginRowDeleting;
            
            public event RDBLoginRowChangeEventHandler RDBLoginRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRDBLoginRow(RDBLoginRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RDBLoginRow AddRDBLoginRow(long RDBLoginID, RSrvConfigRow parentRSrvConfigRowByRSrvConfig_RDBLogin, string DBLoginName, string DBLoginDesc, byte[] SID, string LoginPwdC, string LoginPwdD) {
                RDBLoginRow rowRDBLoginRow = ((RDBLoginRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RDBLoginID,
                        null,
                        DBLoginName,
                        DBLoginDesc,
                        SID,
                        LoginPwdC,
                        LoginPwdD};
                if ((parentRSrvConfigRowByRSrvConfig_RDBLogin != null)) {
                    columnValuesArray[1] = parentRSrvConfigRowByRSrvConfig_RDBLogin[0];
                }
                rowRDBLoginRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRDBLoginRow);
                return rowRDBLoginRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RDBLoginRow FindByRDBLoginID(long RDBLoginID) {
                return ((RDBLoginRow)(this.Rows.Find(new object[] {
                            RDBLoginID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RDBLoginDataTable cln = ((RDBLoginDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RDBLoginDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRDBLoginID = base.Columns["RDBLoginID"];
                this.columnRSrvID = base.Columns["RSrvID"];
                this.columnDBLoginName = base.Columns["DBLoginName"];
                this.columnDBLoginDesc = base.Columns["DBLoginDesc"];
                this.columnSID = base.Columns["SID"];
                this.columnLoginPwdC = base.Columns["LoginPwdC"];
                this.columnLoginPwdD = base.Columns["LoginPwdD"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRDBLoginID = new global::System.Data.DataColumn("RDBLoginID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRDBLoginID);
                this.columnRSrvID = new global::System.Data.DataColumn("RSrvID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRSrvID);
                this.columnDBLoginName = new global::System.Data.DataColumn("DBLoginName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDBLoginName);
                this.columnDBLoginDesc = new global::System.Data.DataColumn("DBLoginDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDBLoginDesc);
                this.columnSID = new global::System.Data.DataColumn("SID", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSID);
                this.columnLoginPwdC = new global::System.Data.DataColumn("LoginPwdC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoginPwdC);
                this.columnLoginPwdD = new global::System.Data.DataColumn("LoginPwdD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoginPwdD);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRDBLoginID}, true));
                this.columnRDBLoginID.AllowDBNull = false;
                this.columnRDBLoginID.Unique = true;
                this.columnDBLoginName.AllowDBNull = false;
                this.columnDBLoginName.MaxLength = 256;
                this.columnDBLoginDesc.MaxLength = 2147483647;
                this.columnLoginPwdC.AllowDBNull = false;
                this.columnLoginPwdC.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RDBLoginRow NewRDBLoginRow() {
                return ((RDBLoginRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RDBLoginRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RDBLoginRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RDBLoginRowChanged != null)) {
                    this.RDBLoginRowChanged(this, new RDBLoginRowChangeEvent(((RDBLoginRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RDBLoginRowChanging != null)) {
                    this.RDBLoginRowChanging(this, new RDBLoginRowChangeEvent(((RDBLoginRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RDBLoginRowDeleted != null)) {
                    this.RDBLoginRowDeleted(this, new RDBLoginRowChangeEvent(((RDBLoginRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RDBLoginRowDeleting != null)) {
                    this.RDBLoginRowDeleting(this, new RDBLoginRowChangeEvent(((RDBLoginRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRDBLoginRow(RDBLoginRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SrvsMgr ds = new SrvsMgr();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RDBLoginDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RDBConfigDataTable : global::System.Data.TypedTableBase<RDBConfigRow> {
            
            private global::System.Data.DataColumn columnRDBID;
            
            private global::System.Data.DataColumn columnDBName;
            
            private global::System.Data.DataColumn columnRDBDesc;
            
            private global::System.Data.DataColumn columnRDBType;
            
            private global::System.Data.DataColumn columnPLevel;
            
            private global::System.Data.DataColumn columnGLevel;
            
            private global::System.Data.DataColumn columnSrvID;
            
            private global::System.Data.DataColumn columnGameID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RDBConfigDataTable() {
                this.TableName = "RDBConfig";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RDBConfigDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RDBConfigDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RDBIDColumn {
                get {
                    return this.columnRDBID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DBNameColumn {
                get {
                    return this.columnDBName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RDBDescColumn {
                get {
                    return this.columnRDBDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RDBTypeColumn {
                get {
                    return this.columnRDBType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PLevelColumn {
                get {
                    return this.columnPLevel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GLevelColumn {
                get {
                    return this.columnGLevel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SrvIDColumn {
                get {
                    return this.columnSrvID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GameIDColumn {
                get {
                    return this.columnGameID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RDBConfigRow this[int index] {
                get {
                    return ((RDBConfigRow)(this.Rows[index]));
                }
            }
            
            public event RDBConfigRowChangeEventHandler RDBConfigRowChanging;
            
            public event RDBConfigRowChangeEventHandler RDBConfigRowChanged;
            
            public event RDBConfigRowChangeEventHandler RDBConfigRowDeleting;
            
            public event RDBConfigRowChangeEventHandler RDBConfigRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRDBConfigRow(RDBConfigRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RDBConfigRow AddRDBConfigRow(long RDBID, string DBName, string RDBDesc, int RDBType, int PLevel, int GLevel, RSrvConfigRow parentRSrvConfigRowByRSrvConfig_RDBConfig, int GameID) {
                RDBConfigRow rowRDBConfigRow = ((RDBConfigRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RDBID,
                        DBName,
                        RDBDesc,
                        RDBType,
                        PLevel,
                        GLevel,
                        null,
                        GameID};
                if ((parentRSrvConfigRowByRSrvConfig_RDBConfig != null)) {
                    columnValuesArray[6] = parentRSrvConfigRowByRSrvConfig_RDBConfig[0];
                }
                rowRDBConfigRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRDBConfigRow);
                return rowRDBConfigRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RDBConfigRow FindByRDBID(long RDBID) {
                return ((RDBConfigRow)(this.Rows.Find(new object[] {
                            RDBID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RDBConfigDataTable cln = ((RDBConfigDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RDBConfigDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRDBID = base.Columns["RDBID"];
                this.columnDBName = base.Columns["DBName"];
                this.columnRDBDesc = base.Columns["RDBDesc"];
                this.columnRDBType = base.Columns["RDBType"];
                this.columnPLevel = base.Columns["PLevel"];
                this.columnGLevel = base.Columns["GLevel"];
                this.columnSrvID = base.Columns["SrvID"];
                this.columnGameID = base.Columns["GameID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRDBID = new global::System.Data.DataColumn("RDBID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRDBID);
                this.columnDBName = new global::System.Data.DataColumn("DBName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDBName);
                this.columnRDBDesc = new global::System.Data.DataColumn("RDBDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRDBDesc);
                this.columnRDBType = new global::System.Data.DataColumn("RDBType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRDBType);
                this.columnPLevel = new global::System.Data.DataColumn("PLevel", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPLevel);
                this.columnGLevel = new global::System.Data.DataColumn("GLevel", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGLevel);
                this.columnSrvID = new global::System.Data.DataColumn("SrvID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSrvID);
                this.columnGameID = new global::System.Data.DataColumn("GameID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGameID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRDBID}, true));
                this.columnRDBID.AllowDBNull = false;
                this.columnRDBID.Unique = true;
                this.columnDBName.AllowDBNull = false;
                this.columnDBName.MaxLength = 256;
                this.columnRDBDesc.MaxLength = 2147483647;
                this.columnRDBType.AllowDBNull = false;
                this.columnPLevel.AllowDBNull = false;
                this.columnGLevel.AllowDBNull = false;
                this.columnSrvID.AllowDBNull = false;
                this.columnGameID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RDBConfigRow NewRDBConfigRow() {
                return ((RDBConfigRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RDBConfigRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RDBConfigRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RDBConfigRowChanged != null)) {
                    this.RDBConfigRowChanged(this, new RDBConfigRowChangeEvent(((RDBConfigRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RDBConfigRowChanging != null)) {
                    this.RDBConfigRowChanging(this, new RDBConfigRowChangeEvent(((RDBConfigRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RDBConfigRowDeleted != null)) {
                    this.RDBConfigRowDeleted(this, new RDBConfigRowChangeEvent(((RDBConfigRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RDBConfigRowDeleting != null)) {
                    this.RDBConfigRowDeleting(this, new RDBConfigRowChangeEvent(((RDBConfigRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRDBConfigRow(RDBConfigRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SrvsMgr ds = new SrvsMgr();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RDBConfigDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RSrvConfigRow : global::System.Data.DataRow {
            
            private RSrvConfigDataTable tableRSrvConfig;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RSrvConfigRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRSrvConfig = ((RSrvConfigDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableRSrvConfig.IDColumn]));
                }
                set {
                    this[this.tableRSrvConfig.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParentID {
                get {
                    try {
                        return ((int)(this[this.tableRSrvConfig.ParentIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RSrvConfig”中列“ParentID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRSrvConfig.ParentIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableRSrvConfig.NameColumn]));
                }
                set {
                    this[this.tableRSrvConfig.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SrvName {
                get {
                    try {
                        return ((string)(this[this.tableRSrvConfig.SrvNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RSrvConfig”中列“SrvName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRSrvConfig.SrvNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UID {
                get {
                    try {
                        return ((string)(this[this.tableRSrvConfig.UIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RSrvConfig”中列“UID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRSrvConfig.UIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PwdC {
                get {
                    try {
                        return ((string)(this[this.tableRSrvConfig.PwdCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RSrvConfig”中列“PwdC”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRSrvConfig.PwdCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Type {
                get {
                    try {
                        return ((int)(this[this.tableRSrvConfig.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RSrvConfig”中列“Type”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRSrvConfig.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LSMaxTimes {
                get {
                    return ((int)(this[this.tableRSrvConfig.LSMaxTimesColumn]));
                }
                set {
                    this[this.tableRSrvConfig.LSMaxTimesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LSErrTimes {
                get {
                    return ((int)(this[this.tableRSrvConfig.LSErrTimesColumn]));
                }
                set {
                    this[this.tableRSrvConfig.LSErrTimesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LSState {
                get {
                    return ((int)(this[this.tableRSrvConfig.LSStateColumn]));
                }
                set {
                    this[this.tableRSrvConfig.LSStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IPLan {
                get {
                    try {
                        return ((string)(this[this.tableRSrvConfig.IPLanColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RSrvConfig”中列“IPLan”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRSrvConfig.IPLanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IPWan1 {
                get {
                    try {
                        return ((string)(this[this.tableRSrvConfig.IPWan1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RSrvConfig”中列“IPWan1”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRSrvConfig.IPWan1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IPWan2 {
                get {
                    try {
                        return ((string)(this[this.tableRSrvConfig.IPWan2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RSrvConfig”中列“IPWan2”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRSrvConfig.IPWan2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParentIDNull() {
                return this.IsNull(this.tableRSrvConfig.ParentIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParentIDNull() {
                this[this.tableRSrvConfig.ParentIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSrvNameNull() {
                return this.IsNull(this.tableRSrvConfig.SrvNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSrvNameNull() {
                this[this.tableRSrvConfig.SrvNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUIDNull() {
                return this.IsNull(this.tableRSrvConfig.UIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUIDNull() {
                this[this.tableRSrvConfig.UIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPwdCNull() {
                return this.IsNull(this.tableRSrvConfig.PwdCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPwdCNull() {
                this[this.tableRSrvConfig.PwdCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableRSrvConfig.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableRSrvConfig.TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIPLanNull() {
                return this.IsNull(this.tableRSrvConfig.IPLanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIPLanNull() {
                this[this.tableRSrvConfig.IPLanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIPWan1Null() {
                return this.IsNull(this.tableRSrvConfig.IPWan1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIPWan1Null() {
                this[this.tableRSrvConfig.IPWan1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIPWan2Null() {
                return this.IsNull(this.tableRSrvConfig.IPWan2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIPWan2Null() {
                this[this.tableRSrvConfig.IPWan2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RDBConfigRow[] GetRDBConfigRows() {
                if ((this.Table.ChildRelations["RSrvConfig_RDBConfig"] == null)) {
                    return new RDBConfigRow[0];
                }
                else {
                    return ((RDBConfigRow[])(base.GetChildRows(this.Table.ChildRelations["RSrvConfig_RDBConfig"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RDBLoginRow[] GetRDBLoginRows() {
                if ((this.Table.ChildRelations["RSrvConfig_RDBLogin"] == null)) {
                    return new RDBLoginRow[0];
                }
                else {
                    return ((RDBLoginRow[])(base.GetChildRows(this.Table.ChildRelations["RSrvConfig_RDBLogin"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RDBUserRow : global::System.Data.DataRow {
            
            private RDBUserDataTable tableRDBUser;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RDBUserRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRDBUser = ((RDBUserDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RDBUserID {
                get {
                    return ((long)(this[this.tableRDBUser.RDBUserIDColumn]));
                }
                set {
                    this[this.tableRDBUser.RDBUserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RDBID {
                get {
                    try {
                        return ((long)(this[this.tableRDBUser.RDBIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RDBUser”中列“RDBID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRDBUser.RDBIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DBUserName {
                get {
                    return ((string)(this[this.tableRDBUser.DBUserNameColumn]));
                }
                set {
                    this[this.tableRDBUser.DBUserNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DBUserDesc {
                get {
                    try {
                        return ((string)(this[this.tableRDBUser.DBUserDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RDBUser”中列“DBUserDesc”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRDBUser.DBUserDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RDBLoginID {
                get {
                    return ((long)(this[this.tableRDBUser.RDBLoginIDColumn]));
                }
                set {
                    this[this.tableRDBUser.RDBLoginIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RDBLoginRow RDBLoginRow {
                get {
                    return ((RDBLoginRow)(this.GetParentRow(this.Table.ParentRelations["RDBLogin_RDBUser"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["RDBLogin_RDBUser"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RDBConfigRow RDBConfigRow {
                get {
                    return ((RDBConfigRow)(this.GetParentRow(this.Table.ParentRelations["RDBConfig_RDBUser"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["RDBConfig_RDBUser"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRDBIDNull() {
                return this.IsNull(this.tableRDBUser.RDBIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRDBIDNull() {
                this[this.tableRDBUser.RDBIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDBUserDescNull() {
                return this.IsNull(this.tableRDBUser.DBUserDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDBUserDescNull() {
                this[this.tableRDBUser.DBUserDescColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RDBLoginRow : global::System.Data.DataRow {
            
            private RDBLoginDataTable tableRDBLogin;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RDBLoginRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRDBLogin = ((RDBLoginDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RDBLoginID {
                get {
                    return ((long)(this[this.tableRDBLogin.RDBLoginIDColumn]));
                }
                set {
                    this[this.tableRDBLogin.RDBLoginIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RSrvID {
                get {
                    try {
                        return ((int)(this[this.tableRDBLogin.RSrvIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RDBLogin”中列“RSrvID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRDBLogin.RSrvIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DBLoginName {
                get {
                    return ((string)(this[this.tableRDBLogin.DBLoginNameColumn]));
                }
                set {
                    this[this.tableRDBLogin.DBLoginNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DBLoginDesc {
                get {
                    try {
                        return ((string)(this[this.tableRDBLogin.DBLoginDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RDBLogin”中列“DBLoginDesc”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRDBLogin.DBLoginDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] SID {
                get {
                    try {
                        return ((byte[])(this[this.tableRDBLogin.SIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RDBLogin”中列“SID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRDBLogin.SIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LoginPwdC {
                get {
                    return ((string)(this[this.tableRDBLogin.LoginPwdCColumn]));
                }
                set {
                    this[this.tableRDBLogin.LoginPwdCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LoginPwdD {
                get {
                    try {
                        return ((string)(this[this.tableRDBLogin.LoginPwdDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RDBLogin”中列“LoginPwdD”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRDBLogin.LoginPwdDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RSrvConfigRow RSrvConfigRow {
                get {
                    return ((RSrvConfigRow)(this.GetParentRow(this.Table.ParentRelations["RSrvConfig_RDBLogin"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["RSrvConfig_RDBLogin"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRSrvIDNull() {
                return this.IsNull(this.tableRDBLogin.RSrvIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRSrvIDNull() {
                this[this.tableRDBLogin.RSrvIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDBLoginDescNull() {
                return this.IsNull(this.tableRDBLogin.DBLoginDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDBLoginDescNull() {
                this[this.tableRDBLogin.DBLoginDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSIDNull() {
                return this.IsNull(this.tableRDBLogin.SIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSIDNull() {
                this[this.tableRDBLogin.SIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLoginPwdDNull() {
                return this.IsNull(this.tableRDBLogin.LoginPwdDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLoginPwdDNull() {
                this[this.tableRDBLogin.LoginPwdDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RDBUserRow[] GetRDBUserRows() {
                if ((this.Table.ChildRelations["RDBLogin_RDBUser"] == null)) {
                    return new RDBUserRow[0];
                }
                else {
                    return ((RDBUserRow[])(base.GetChildRows(this.Table.ChildRelations["RDBLogin_RDBUser"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RDBConfigRow : global::System.Data.DataRow {
            
            private RDBConfigDataTable tableRDBConfig;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RDBConfigRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRDBConfig = ((RDBConfigDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RDBID {
                get {
                    return ((long)(this[this.tableRDBConfig.RDBIDColumn]));
                }
                set {
                    this[this.tableRDBConfig.RDBIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DBName {
                get {
                    return ((string)(this[this.tableRDBConfig.DBNameColumn]));
                }
                set {
                    this[this.tableRDBConfig.DBNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RDBDesc {
                get {
                    try {
                        return ((string)(this[this.tableRDBConfig.RDBDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RDBConfig”中列“RDBDesc”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRDBConfig.RDBDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RDBType {
                get {
                    return ((int)(this[this.tableRDBConfig.RDBTypeColumn]));
                }
                set {
                    this[this.tableRDBConfig.RDBTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PLevel {
                get {
                    return ((int)(this[this.tableRDBConfig.PLevelColumn]));
                }
                set {
                    this[this.tableRDBConfig.PLevelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GLevel {
                get {
                    return ((int)(this[this.tableRDBConfig.GLevelColumn]));
                }
                set {
                    this[this.tableRDBConfig.GLevelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SrvID {
                get {
                    return ((int)(this[this.tableRDBConfig.SrvIDColumn]));
                }
                set {
                    this[this.tableRDBConfig.SrvIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GameID {
                get {
                    return ((int)(this[this.tableRDBConfig.GameIDColumn]));
                }
                set {
                    this[this.tableRDBConfig.GameIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RSrvConfigRow RSrvConfigRow {
                get {
                    return ((RSrvConfigRow)(this.GetParentRow(this.Table.ParentRelations["RSrvConfig_RDBConfig"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["RSrvConfig_RDBConfig"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRDBDescNull() {
                return this.IsNull(this.tableRDBConfig.RDBDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRDBDescNull() {
                this[this.tableRDBConfig.RDBDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RDBUserRow[] GetRDBUserRows() {
                if ((this.Table.ChildRelations["RDBConfig_RDBUser"] == null)) {
                    return new RDBUserRow[0];
                }
                else {
                    return ((RDBUserRow[])(base.GetChildRows(this.Table.ChildRelations["RDBConfig_RDBUser"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RSrvConfigRowChangeEvent : global::System.EventArgs {
            
            private RSrvConfigRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RSrvConfigRowChangeEvent(RSrvConfigRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RSrvConfigRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RDBUserRowChangeEvent : global::System.EventArgs {
            
            private RDBUserRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RDBUserRowChangeEvent(RDBUserRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RDBUserRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RDBLoginRowChangeEvent : global::System.EventArgs {
            
            private RDBLoginRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RDBLoginRowChangeEvent(RDBLoginRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RDBLoginRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RDBConfigRowChangeEvent : global::System.EventArgs {
            
            private RDBConfigRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RDBConfigRowChangeEvent(RDBConfigRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RDBConfigRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591